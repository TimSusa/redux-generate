{"version":3,"sources":["index.js"],"names":["generateActions","actionObject","arr","Object","keys","map","item","camelize","payload","type","tmp","forEach","assign","str","me","toLowerCase","split","join","replace","match","index","toUpperCase","createActionTypes","typeArray","typeObject","generateReducers","initialState","handlers","state","action","hasOwnProperty"],"mappings":";AAgDC,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,OAAA,KAAA,GAAA,mBAAA,OAAA,wBAAA,EAAA,EAAA,OAAA,OAAA,sBAAA,GAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,eAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAhDM,SAASA,EAAgBC,GAC1BC,IAAAA,EAAMC,OAAOC,KAAKH,GAAcI,IAAI,SAAAC,GAEnCC,OAAAA,EAAAA,GAAAA,EAASD,GAAOE,SAAAA,GACR,MAAA,CACLC,KAAMR,EAAaK,GACnBE,QAAAA,OAKJE,EAAM,GAIHA,OAHPR,EAAIS,QAAQ,SAAAL,GACVI,EAAMP,OAAOS,OAAO,GAAIF,EAAKJ,KAExBI,EAGT,SAASH,EAASM,GAKTC,OAJID,EACRE,cACAC,MAAM,KACNC,KAAK,KACEC,QAAQ,0BAA2B,SAASC,EAAOC,GACvD,OAAW,IAAVD,EAAoB,GACR,IAAVC,EAAcD,EAAMJ,cAAgBI,EAAME,gBAI9C,SAASC,EAAkBC,GAC5BC,IAAAA,EAAa,GAOVA,OANPD,EAAUZ,QAAQ,SAAAL,GAChBkB,EACKA,EAAAA,GAAAA,EACFlB,EAAAA,GAAAA,EAAOA,MAGLkB,EAGF,SAASC,EAAiBC,EAAcC,GACtC,OAAA,WAAiBC,IAAAA,EAAQF,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAAA,EAAcG,EAAQ,UAAA,OAAA,EAAA,UAAA,QAAA,EAChDF,OAAAA,EAASG,eAAeD,EAAOpB,MAC1BkB,EAASE,EAAOpB,MAAMmB,EAAOC,GAE7BD,GAGZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,iBAAA","file":"index.map","sourceRoot":"../src","sourcesContent":["export function generateActions(actionObject) {\n  let arr = Object.keys(actionObject).map(item => {\n    return {\n      [camelize(item)](payload) {\n        return {\n          type: actionObject[item],\n          payload,\n        }\n      },\n    }\n  })\n  let tmp = {}\n  arr.forEach(item => {\n    tmp = Object.assign({}, tmp, item)\n  })\n  return tmp\n}\n\nfunction camelize(str) {\n  const me = str\n    .toLowerCase()\n    .split('_')\n    .join(' ')\n  return me.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function(match, index) {\n    if (+match === 0) return '' // or if (/\\s+/.test(match)) for white spaces\n    return index === 0 ? match.toLowerCase() : match.toUpperCase()\n  })\n}\n\nexport function createActionTypes(typeArray) {\n  let typeObject = {}\n  typeArray.forEach(item => {\n    typeObject = {\n      ...typeObject,\n      [item]: item,\n    }\n  })\n  return typeObject\n}\n\nexport function generateReducers(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action)\n    } else {\n      return state\n    }\n  }\n}\n"]}